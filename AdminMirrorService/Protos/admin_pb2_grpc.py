# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Protos.admin_pb2 as admin_pb2


class adminApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAllCar = channel.unary_unary(
        '/adminApi/getAllCar',
        request_serializer=admin_pb2.admin.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getAllCarParked = channel.unary_unary(
        '/adminApi/getAllCarParked',
        request_serializer=admin_pb2.admin.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getAllCarParkedByDate = channel.unary_unary(
        '/adminApi/getAllCarParkedByDate',
        request_serializer=admin_pb2.isParkedDate.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getAllCarByLocation = channel.unary_unary(
        '/adminApi/getAllCarByLocation',
        request_serializer=admin_pb2.adminAllCarLocation.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getCarParkingDetails = channel.unary_unary(
        '/adminApi/getCarParkingDetails',
        request_serializer=admin_pb2.adminAllCarId.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getCarByLocationCurrentlyParked = channel.unary_unary(
        '/adminApi/getCarByLocationCurrentlyParked',
        request_serializer=admin_pb2.adminAllCarLocation.SerializeToString,
        response_deserializer=admin_pb2.Parkings.FromString,
        )
    self.getCarByLocationCarId = channel.unary_unary(
        '/adminApi/getCarByLocationCarId',
        request_serializer=admin_pb2.adminAllCarIdLocation.SerializeToString,
        response_deserializer=admin_pb2.message.FromString,
        )


class adminApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getAllCar(self, request, context):
    """all cars
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAllCarParked(self, request, context):
    """all cars parked right now
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAllCarParkedByDate(self, request, context):
    """all cars at a certain date
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAllCarByLocation(self, request, context):
    """all cars parked at a certain location
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCarParkingDetails(self, request, context):
    """locations of parking for the particular car????????????????
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCarByLocationCurrentlyParked(self, request, context):
    """car at a particular location currently ispark=true
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCarByLocationCarId(self, request, context):
    """checks if the car is present at a particular location ispark=true
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_adminApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAllCar': grpc.unary_unary_rpc_method_handler(
          servicer.getAllCar,
          request_deserializer=admin_pb2.admin.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getAllCarParked': grpc.unary_unary_rpc_method_handler(
          servicer.getAllCarParked,
          request_deserializer=admin_pb2.admin.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getAllCarParkedByDate': grpc.unary_unary_rpc_method_handler(
          servicer.getAllCarParkedByDate,
          request_deserializer=admin_pb2.isParkedDate.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getAllCarByLocation': grpc.unary_unary_rpc_method_handler(
          servicer.getAllCarByLocation,
          request_deserializer=admin_pb2.adminAllCarLocation.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getCarParkingDetails': grpc.unary_unary_rpc_method_handler(
          servicer.getCarParkingDetails,
          request_deserializer=admin_pb2.adminAllCarId.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getCarByLocationCurrentlyParked': grpc.unary_unary_rpc_method_handler(
          servicer.getCarByLocationCurrentlyParked,
          request_deserializer=admin_pb2.adminAllCarLocation.FromString,
          response_serializer=admin_pb2.Parkings.SerializeToString,
      ),
      'getCarByLocationCarId': grpc.unary_unary_rpc_method_handler(
          servicer.getCarByLocationCarId,
          request_deserializer=admin_pb2.adminAllCarIdLocation.FromString,
          response_serializer=admin_pb2.message.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adminApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
